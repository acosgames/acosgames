declare global {
    var gamelog: (...msg: any[]) => void;
    var gameerror: (...msg: any[]) => void;
    var save: (gamestate: GameState) => void;
    var random: () => number;
    var game: () => GameState;
    var actions: () => Action[];
    var killGame: () => void;
    var database: () => any;
    var ignore: () => void;
}
declare class ACOSServer {
    gameState: GameState;
    currentAction: Action | null;
    defaultSeconds: number;
    kickedPlayers: string[];
    init: () => void;
    on: (type: string, cb: (action: Action) => boolean) => void;
    ignore(): void;
    setGame: (game: GameState) => void;
    save: () => void;
    gameerror: (payload: any) => void;
    gamecancelled: (payload: any) => void;
    gameover: (payload: any) => void;
    log: (...msg: any[]) => void;
    error: (...msg: any[]) => void;
    kickPlayer: (id: string) => void;
    random(): number;
    randomInt: (min: any, max: any) => number;
    database(): any;
    action: () => Action | null;
    gamestate: () => GameState | null;
    room(): Room;
    room(key: string): any;
    room(key: string, value: string | number): any;
    state(): State;
    state(key: string): any;
    state(key: string, value: any): any;
    players(): Players;
    players(shortid: string): Player;
    players(shortid: string, value: any): any;
    stats(shortid: string, abbreviation: string): number | string;
    stats(shortid: string, abbreviation: string, value: number | string): number | string;
    playerList: () => string[];
    playerCount: () => number;
    teams(): Teams;
    teams(teamid: string): Team;
    teams(teamid: string, value: any): any;
    next(): Next;
    next(id: string, action: string | string[]): Next;
    timer(): Timer;
    setTimer: (seconds: number) => void;
    reachedTimelimit: (action: Action) => boolean;
    events(): Events;
    events(name: string): any;
    events(name: string, payload: any): Events | any;
    clearEvents: () => void;
}
declare const _default: ACOSServer;
export default _default;
